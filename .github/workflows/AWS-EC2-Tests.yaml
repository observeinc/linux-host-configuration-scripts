run-name: AWS EC2 - ${{ github.event_name }} by @${{ github.actor }}
# name: Fabric Build
on: 
  workflow_dispatch:
    inputs:
      install_script_branch:
        type: string
        description: Select the branch to test from linux-agent-install-scripts 
        default: main
      this_repo_branch:
        type: string
        description: Select the branch to use from this repo
        default: main
      terraform_run_destroy:
        type: choice
        options:
        - true
        - false
      fail_first_test:
        type: choice
        options:
        - false
        - true
      fail_second_test:
        type: choice
        options:
        - false
        - true
  push:
    branches:    
      - 'test/**'
  pull_request:

  schedule:
    # only runs on default branch
    # * is a special character in YAML so you have to quote this string
    - cron:  '45 */2 * * *'

jobs:
  
  Run-Test-Build:
    strategy:
      max-parallel: 30
      fail-fast: false
      matrix:
        test_groups: ['base_defaults']
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: write
      issues: read
      checks: write
    env: # Or as an environment variable
      TF_VAR_OBSERVE_CUSTOMER_ID: ${{ secrets.TF_VAR_OBSERVE_CUSTOMER_ID }}
      TF_VAR_OBSERVE_DATASTREAM_TOKEN: ${{ secrets.TF_VAR_OBSERVE_DATASTREAM_TOKEN }}
      TF_VAR_PUBLIC_KEY: ${{ secrets.TF_VAR_PUBLIC_KEY }}
      TF_VAR_REGION: "us-west-2"
      TF_VAR_USE_BRANCH_NAME: main
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }} 
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      INSTALL_BRANCH: main
      THIS_REPO_BRANCH: main
      TERRAFORM_RUN_DESTROY: true
      FAIL_FIRST_TEST: false
      FAIL_SECOND_TEST: false
      WORK_DIR: test_code


      # TF_LOG: DEBUG
    steps:
      - name: Value of inputs
        run: |
          echo "install_script_branch=${{ github.event.inputs.install_script_branch }}"
          echo "this_repo_branch=${{ github.event.inputs.this_repo_branch }}"
          echo "terraform_run_destroy=${{ github.event.inputs.terraform_run_destroy }}"
          echo "fail_first_test=${{ github.event.inputs.fail_first_test }}"
          echo "fail_second_test=${{ github.event.inputs.fail_second_test }}"

      - name: Set variables based on inputs
        if: github.event.inputs.terraform_run_destroy != ''
        run: |

          echo "TF_VAR_USE_BRANCH_NAME=${{ github.event.inputs.install_script_branch }}" >> $GITHUB_ENV

          echo "THIS_REPO_BRANCH=refs/heads/${{ github.event.inputs.this_repo_branch }}" >> $GITHUB_ENV

          echo "TERRAFORM_RUN_DESTROY=${{ github.event.inputs.terraform_run_destroy }}" >> $GITHUB_ENV
        
          echo "FAIL_FIRST_TEST=${{ github.event.inputs.fail_first_test }}" >> $GITHUB_ENV
          
          echo "FAIL_SECOND_TEST=${{ github.event.inputs.fail_second_test }}" >> $GITHUB_ENV

      - name: Set Custom Environment Variables
        run: |
          # if pull request don't destroy resources
          if ${{ github.event_name == 'pull_request' }}; then
            echo "TERRAFORM_RUN_DESTROY=false" >> $GITHUB_ENV
            echo "THIS_REPO_BRANCH=${{ github.ref }}" >> $GITHUB_ENV
          fi

          # value for resource names
          echo "TF_VAR_WORKFLOW_MATRIX_VALUE=${{ matrix.test_groups }}" >> $GITHUB_ENV

          # This variable tells code it running on CI server
          echo "TF_VAR_CI=$CI" >> $GITHUB_ENV

          # This variable gets just the branch name without url stuff
          echo "GIT_HUB_SHORT_BRANCH_NAME=${GITHUB_BRANCH##*/}" >> $GITHUB_ENV

          # Create directory for keys and set permissions
          mkdir "$HOME/.ssh"
          chmod 700 "$HOME/.ssh"
          # variable for private key which is required for CI server to login to machines
          echo "TF_VAR_PRIVATE_KEY_PATH=$HOME/.ssh/github_actions" >> $GITHUB_ENV
        env:
          GITHUB_BRANCH: ${{ github.ref }}

      - name: Set SSH Key
        run: |
          # variable for path to private key
          echo "${{ secrets.PRIVATE_KEY }}" > "$TF_VAR_PRIVATE_KEY_PATH"
          # set permissions for key file
          chmod 600 "$TF_VAR_PRIVATE_KEY_PATH"
          # display for troubleshooting
          cat "$TF_VAR_PRIVATE_KEY_PATH"

      - name: Print Environment Variables - troubleshooting
        run: |
          env | sort -f

      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.THIS_REPO_BRANCH }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # AWS Login - orig role
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.THUNDERDOME_AWS_ROLE }}
          aws-region: ${{ env.TF_VAR_REGION }}

      # GCP Login
      # This is key generated in GCP console for service account
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: 'Test gcloud CLI'
        run: 'gcloud info'

      - name: terraform and config files
        run: |
          python3 -c "from workflow_tasks import tf_override_file; tf_override_file(cloud=\"aws\", test_group=\"${{ matrix.test_groups }}\")"

          python3 -c "from workflow_tasks import tf_main_file; tf_main_file(module=\"aws_machines\")"

          python3 -c "from workflow_tasks import tf_output_file; tf_output_file(module=\"aws_machines\")"

          python3 -c "from workflow_tasks import config_ini; config_ini(custid=\"${{ secrets.STAGE_CUSTOMER_ID }}\", domain=\"${{ secrets.STAGE_DOMAIN }}\", token=\"${{ secrets.STAGE_DATASTREAM_TOKEN }}\")"

        working-directory: "${{ env.WORK_DIR }}/python_scripts"
        
      - name: terraform version
        run: |
          terraform version
        working-directory: "${{ env.WORK_DIR }}"

      - name: terraform init
        run: |
          terraform init
        working-directory: "${{ env.WORK_DIR }}"

      - name: terraform validate
        run: |
          terraform validate
        working-directory: "${{ env.WORK_DIR }}"

      - name: terraform apply
        run: |
          terraform apply -auto-approve
        working-directory: "${{ env.WORK_DIR }}"

      # Run tests
      - name: python script
        run: |
          # create output directory for archive files
          mkdir file_outputs
          mkdir log_outputs

          # install dependencies
          pip3 install -r requirements.txt

          # run tests 
          fab test -a ${{ env.FAIL_FIRST_TEST }}
        working-directory: "${{ env.WORK_DIR }}/python_scripts"

      - name: Retry tests
        if: ${{ env.TEST_RESULT == 'FAIL' }} 
        run: |
          # run tests
          fab test -a ${{ env.FAIL_SECOND_TEST }} -o 2
          
        working-directory: "${{ env.WORK_DIR }}/python_scripts" 

      - name: delete ini
        if: always()
        run: |
          rm config.ini
        working-directory: "${{ env.WORK_DIR }}/python_scripts"

      - name: clean_output
        if: always()
        run: |
          sed -i 's/${{ secrets.STAGE_DATASTREAM_TOKEN }}/******/g' ./*
        working-directory: "${{ env.WORK_DIR }}/python_scripts/file_outputs"

      - name: clean_logs
        if: always()
        run: |
          sed -i 's/${{ secrets.STAGE_DATASTREAM_TOKEN }}/******/g' ./*
        working-directory: "${{ env.WORK_DIR }}/python_scripts/log_outputs"

      - name: Archive test results
        uses: actions/upload-artifact@v3
        with:
          name: file_outputs
          path: | 
            /home/runner/work/linux-host-configuration-scripts/linux-host-configuration-scripts/test_code/python_scripts/file_outputs/
            /home/runner/work/linux-host-configuration-scripts/linux-host-configuration-scripts/test_code/python_scripts/log_outputs/
          retention-days: 1

      - name: terraform destroy
        if: always()
        run: |
          echo "Value of input ${{ env.TERRAFORM_RUN_DESTROY == 'true' }}"
          
          if ${{ env.TERRAFORM_RUN_DESTROY == 'true' }}; then
            terraform destroy -auto-approve
          fi
        working-directory: "${{ env.WORK_DIR }}"

      - name: Fail Check
        if: ${{ env.TEST_RESULT == 'FAIL' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('Fabric tests failed')
